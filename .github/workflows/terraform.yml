
# yamllint disable rule:line-length
---
name: Terraform

"on":
  pull_request:

  push:
    branches: ["main"]

jobs:
  determine-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      plan_matrix: ${{ steps.set-matrix.outputs.plan_matrix }}
      apply_matrix: ${{ steps.set-matrix.outputs.apply_matrix }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            terraform:
              - '**/*.tf'
              - '**/*.tfvars'
              - 'environments.yml'
              - '.terraform.lock.hcl'
      - id: set-matrix
        run: |
          if [ "${{ steps.changes.outputs.terraform }}" != "true" ]; then
            echo 'plan_matrix=[{"name":"skip","github_environment":"skip"}]' >> "$GITHUB_OUTPUT"
            echo 'apply_matrix=[{"name":"skip","github_environment":"skip"}]' >> "$GITHUB_OUTPUT"
            exit 0
          fi
          matrix=$(yq e -o=json -I=0 '.environments | sort_by(.order)' environments.yml 2>/dev/null || echo '[]')
          if [ "$matrix" = "[]" ]; then
            echo 'plan_matrix=[{"name":"skip","github_environment":"skip"}]' >> "$GITHUB_OUTPUT"
            echo 'apply_matrix=[{"name":"skip","github_environment":"skip"}]' >> "$GITHUB_OUTPUT"
          else
            plan=$(echo "$matrix" | jq '[.[] | {name: .name, github_environment: (.name + "-plan")}]')
            apply=$(echo "$matrix" | jq '[.[] | {name: .name, github_environment: (.name + "-apply")}]')
            echo "plan_matrix=$plan" >> "$GITHUB_OUTPUT"
            echo "apply_matrix=$apply" >> "$GITHUB_OUTPUT"
          fi

  tf-plan:
    needs: determine-matrix
    if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && fromJSON(needs.determine-matrix.outputs.plan_matrix)[0].name != 'skip' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.determine-matrix.outputs.plan_matrix) }}
    name: tf-plan-${{ matrix.environment.name }}
    environment: ${{ matrix.environment.github_environment }}
    permissions:
      actions: read
      checks: write
      contents: read
      id-token: write
      pull-requests: write
    env:
      ARM_USE_OIDC: "true"
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create plugin cache
        run: |
          mkdir -p "$HOME/.terraform.d/plugin-cache"
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('.terraform.lock.hcl') }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform plan ${{ matrix.environment.name }}
        uses: op5dev/tf-via-pr@v13
        with:
          working-directory: .
          command: plan
          arg-var-file: ${{ format('{0}/env/{1}/{1}.tfvars', github.workspace, matrix.environment.name) }}
          arg-backend-config: ${{ format('{0}/env/{1}/{1}.state.config', github.workspace, matrix.environment.name) }}
          plan-encrypt: ${{ secrets.TF_PASSPHRASE }}
          validate: true
          format: true

  tf-plan-summary:
    needs: [determine-matrix, tf-plan]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: read
    steps:
      - name: Generate summary
        id: summary
        uses: actions/github-script@v7
        env:
          MATRIX: ${{ needs.determine-matrix.outputs.plan_matrix }}
        with:
          script: |
            const matrix = JSON.parse(process.env.MATRIX);
            if (matrix[0].name === 'skip') {
              core.setOutput('summary', 'No environments were deployed.');
            } else {
              const { data } = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
              });
              const planJobs = data.jobs.filter(j => j.name.startsWith('tf-plan-'))
              const lines = planJobs.map(j => {
                const name = j.name.replace('tf-plan-', '');
                return `- ${name}: ${j.conclusion}`;
              });
              core.setOutput('summary', lines.join('\n'));
            }
      - name: Comment summary
        if: github.event_name == 'pull_request' && fromJSON(needs.determine-matrix.outputs.plan_matrix)[0].name != 'skip'
        uses: actions/github-script@v7
        env:
          BODY: ${{ steps.summary.outputs.summary }}
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: process.env.BODY,
            });
      - name: Log summary
        if: github.event_name != 'pull_request'
        run: echo "${{ steps.summary.outputs.summary }}"

  tf-apply:
    needs: [determine-matrix, tf-plan-summary]
    if: github.event_name == 'push' && fromJSON(needs.determine-matrix.outputs.apply_matrix)[0].name != 'skip'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        environment: ${{ fromJSON(needs.determine-matrix.outputs.apply_matrix) }}
    name: tf-apply-${{ matrix.environment.name }}
    environment: ${{ matrix.environment.github_environment }}
    permissions:
      actions: read
      checks: write
      contents: read
      id-token: write
      pull-requests: write
    env:
      ARM_USE_OIDC: "true"
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create plugin cache
        run: |
          mkdir -p "$HOME/.terraform.d/plugin-cache"
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('.terraform.lock.hcl') }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform apply ${{ matrix.environment.name }}
        uses: op5dev/tf-via-pr@v13
        with:
          working-directory: .
          command: apply
          arg-lock: true
          arg-var-file: ${{ format('{0}/env/{1}/{1}.tfvars', github.workspace, matrix.environment.name) }}
          arg-backend-config: ${{ format('{0}/env/{1}/{1}.state.config', github.workspace, matrix.environment.name) }}
          plan-encrypt: ${{ secrets.TF_PASSPHRASE }}
          validate: true
          format: true

